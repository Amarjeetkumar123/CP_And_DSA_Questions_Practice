class Solution {
public:
    int count(vector<pair<int,int>>&intervals){
            
        int cnt = 0;
        int i=0 , j=1;
        
        int n = intervals.size();
        
        while(j < n){
            
            if(intervals[i].second < intervals[j].first){
                // non overlapping case
                i = j;
                j++;
            }
            else if(intervals[i].second <= intervals[j].second){
                // overlapping case
                cnt++;  // delete right interval
                j++;
            }
            else if(intervals[i].second > intervals[j].second){
                // overlapping case
                cnt++;  // delete left interval
                i = j;
                j++;
            }
        }
        
        return n-cnt;
    }
    
    
    int maxPalindromes(string s, int k) {
        
         int n = s.size();
        vector<vector<int>>dp(n,vector<int>(n,0));
        
        for(int diff = 0; diff < n; diff++){
            
            for(int i=0, j=i+diff; j<n; i++,j++){
                
                if(i==j){
                    dp[i][j] = 1;
                }
                else if(diff==1){
                    
                    dp[i][j] = (s[i] == s[j]) ? 2 : 0;
                }
                else{
                    
                    if(s[i] == s[j] && dp[i+1][j-1]){
                        dp[i][j] = dp[i+1][j-1]+2;
                    }
                }
              
                }
            }
        
        vector<pair<int,int>>v;
        for(int i=0;i<dp.size();i++){
            for(int j=0;j<dp[0].size();j++){
                
                if(dp[i][j] > 0 && (j-i+1) >= k){
                    v.push_back({i,j});
                }
            }
        }
        
        return count(v);
        
   }
};