
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        
        if(root){

       // case 1 : Key lies in LeftSubTree
        if(key < root->val){
            root->left = deleteNode(root->left,key);
            return root;
        }
        
        // case 2 : Key lies in RightSubtree
        else if(key > root->val){
            root->right = deleteNode(root->right,key);
            return root;
        }
        else{
            
            // root have no child
            if(!root->left && !root->right){
                delete root;
                return nullptr;
            }
            // root have leftsubtree only
            else if(root->left && !root->right){
                TreeNode* temp = root->left;
                delete root;
                root = nullptr;
                return temp;
            }
            // root have rightsubtree only
            else if(!root->left && root->right){
                TreeNode* temp = root->right;
                delete root;
                root = NULL;
                return temp;
            }
            // root have both leftsubtree and rightsubtree
            else{
                // deleting node with the help of lst
                TreeNode* replace = root->left;
                while(replace->right != NULL){
                    replace = replace->right;
                }
                
                swap(replace->val , root->val);
                root->left = deleteNode(root->left,key);
                return root;
            }
        }
        }
        return root;
    }
};