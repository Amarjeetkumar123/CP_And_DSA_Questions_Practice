//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size();
	    int m = grid[0].size();
	    
	    vector<vector<int>>ans(n,vector<int>(m,0));
	    vector<vector<bool>>visited(n,vector<bool>(m,false));
	    
	    queue<pair<pair<int,int>,int>>q;
	    
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            
	            if(grid[i][j]==1){
	                q.push(make_pair(make_pair(i,j),0));
	                visited[i][j] = true;
	            }
	        }
	    }
	    
	    int dx[4] = {-1,1,0,0};
	    int dy[4] = {0,0,-1,1};
	    
	    while(!q.empty()){
	        
	        auto front = q.front();
	        q.pop();
	        
	        int x = front.first.first , y = front.first.second , dist = front.second;
	        
	        ans[x][y] = dist;
	        
	        for(int i=0;i<4;i++){
	            
	            int nx = x+dx[i];
	            int ny = y+dy[i];
	            
	            if(nx>=0 && ny>=0 && nx<=n-1 && ny<=m-1 && !visited[nx][ny]){
	                visited[nx][ny] = true;
	                q.push(make_pair(make_pair(nx,ny),dist+1));
	            }
	        }
	    }
	    return ans;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		vector<vector<int>> ans = obj.nearest(grid);
		for(auto i: ans){
			for(auto j: i){
				cout << j << " ";
			}
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends